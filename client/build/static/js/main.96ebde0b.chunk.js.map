{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","components/ProductItem/index.js","utils/actions.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","utils/reducers.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","state","useSelector","dispatch","useDispatch","cart","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","currentCategory","useQuery","loading","data","useEffect","products","forEach","then","length","filter","category","map","key","spinner","CategoryMenu","categories","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","DeleteBtn","props","tabIndex","NoMatch","Jumbotron","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","defaultState","reducer","action","newState","createStore","client","ApolloClient","operation","setContext","headers","authorization","uri","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.96ebde0b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the databse `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx) and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      //create object store for each type of data and set \"primary\" key index to the `id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n      //save a reference of the database to the `db` variable\n      db = request.result;\n      //open a tranasaction to whatever we pass into the `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n\n  });\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction ProductItem(item) {\n\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n    // if there was a match, call UPDATE with a new purchase quantity\n    if (itemInCart) {\n      dispatch({\n        type:UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n    dispatch({\n      type: ADD_TO_CART,\n      product: { ...item, purchaseQuantity: 1 }\n    });\n    idbPromise('cart', 'put', {...item, purchaseQuantity: 1 });\n  }\n  };\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;","import React, { useEffect} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\n\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction ProductList() {\n\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    // if there's data to be stored\n    if (data) {\n      //store data in global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      // but also take each product and save it to IndexedDB using the helper function\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n\n  const { categories } = state;\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    //if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\n\nconst CartItem = ({ item }) => {\n    // const state = useSelector((state) => {\n    //     return state\n    // });\n    const dispatch = useDispatch();\n\n    const removeFromCart = item => {\n        dispatch({\n          type: REMOVE_FROM_CART,\n          _id: item._id\n        });\n        idbPromise('cart', 'delete', { ...item });\n      };\n\n    const onChange = (e) => {\n        const value = e.target.value;\n\n        if (value === '0') {\n            dispatch({\n                type: REMOVE_FROM_CART,\n                _id: item._id\n            });\n            idbPromise('cart', 'delete', { ...item });\n        } else {\n            dispatch({\n                type: UPDATE_CART_QUANTITY,\n                _id: item._id,\n                purchaseQuantity: parseInt(value)\n            });\n            idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n        }\n    };\n\n    return (\n        <div className=\"flex-row\">\n            <div>\n                <img\n                    src={`/images/${item.image}`}\n                    alt=\"\"\n                />\n            </div>\n            <div>\n                <div>{item.name}, ${item.price}</div>\n                <div>\n                    <span>Qty:</span>\n                    <input\n                        type=\"number\"\n                        placeholder=\"1\"\n                        value={item.purchaseQuantity}\n                        onChange={onChange}\n                    />\n                    <span\n                        role=\"img\"\n                        aria-label=\"trash\"\n                        onClick={() => removeFromCart(item)}\n                    >\n                        🗑️\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n    const state = useSelector((state) => {\n        return state\n    });\n\n    const dispatch = useDispatch();\n    const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n    useEffect(() => {\n        async function getCart() {\n            const cart = await idbPromise('cart', 'get');\n            dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n        };\n\n        if (!state.cart?.length) {\n            getCart();\n        }\n    }, [state.cart.length, dispatch]);\n\n    useEffect(() => {\n        if (data) {\n            stripePromise.then((res) => {\n                res.redirectToCheckout({ sessionId: data.checkout.session });\n            });\n        }\n    }, [data]);\n\n    function toggleCart() {\n        dispatch({ type: TOGGLE_CART });\n    }\n\n    function calculateTotal() {\n        let sum = 0;\n        state.cart.forEach(item => {\n            sum += item.price * item.purchaseQuantity;\n        });\n        return sum.toFixed(2);\n    }\n\n    function submitCheckout() {\n        const productIds = [];\n\n        state.cart.forEach((item) => {\n            for (let i = 0; i < item.purchaseQuantity; i++) {\n                productIds.push(item._id);\n            }\n        });\n\n        getCheckout({\n            variables: { products: productIds }\n        });\n    }\n\n    if (!state.cartOpen) {\n        return (\n            <div className=\"cart-closed\" onClick={toggleCart}>\n                <span\n                    role=\"img\"\n                    aria-label=\"trash\">🛒</span>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"cart\">\n            <div className=\"close\" onClick={toggleCart}>[close]</div>\n            <h2>Shopping Cart</h2>\n            {state.cart.length ? (\n                <div>\n                    {state.cart.map(item => (\n                        <CartItem key={item._id} item={item} />\n                    ))}\n                    <div className=\"flex-row space-between\">\n                        <strong>Total: ${calculateTotal()}</strong>\n                        {\n                            Auth.loggedIn() ?\n                            <button onClick={submitCheckout}>\n                                Checkout\n                            </button>\n                            :\n                            <span>(log in to check out</span>\n                        }\n                    </div>\n                </div>\n            ) : (\n                <h3>\n                    <span role=\"img\" aria-label=\"shocked\">\n                        😱\n                    </span>\n                    You haven't added anything to your cart yet!\n                </h3>\n            )}\n        </div>\n    );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport Cart from '../components/Cart';\n\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Detail() {\n\n  const state = useSelector((state) => {\n    return state\n  });\n\n  const dispatch = useDispatch();\n\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', {...currentProduct, purchaseQuantity: 1 });\n    }\n  }\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n \n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button \n              disabled={!cart.find(p => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;\n","import React from \"react\";\n\n// The ...props means, spread all of the passed props onto this element\n// That way we don't have to define them all individually\nfunction DeleteBtn(props) {\n  return (\n    <span {...props} role=\"button\" tabIndex=\"0\">\n      ✗\n    </span>\n  );\n}\n\nexport default DeleteBtn;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { idbPromise } from '../utils/helpers';\nimport { ADD_ORDER } from '../utils/mutations';\n\nfunction Success() {\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n        async function saveOrder() {\n            const cart = await idbPromise('cart', 'get');\n            const products = cart.map(item => item._id);\n\n            if (products.length) {\n                const { data } = await addOrder({ variables: { products } });\n                const productData = data.addOrder.products;\n\n                productData.forEach((item) => {\n                    idbPromise('cart', 'delete', item);\n                });\n            }\n\n            setTimeout(() => {\n                window.location.assign('/');\n            }, 3000);\n\n        }\n\n        saveOrder();\n    }, [addOrder]);\n\n    return (\n        <div>\n          <Jumbotron>\n            <h1>Success!</h1>\n            <h2>\n              Thank you for your purchase!\n            </h2>\n            <h2>\n              You will now be redirected to the home page\n            </h2>\n          </Jumbotron>\n        </div>\n      );\n    };\n    \n    export default Success;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","// import { useReducer } from 'react';\n\nimport {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n} from './actions';\n\nconst defaultState = {\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: '', \n}\n\nconst reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODCUTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products],\n            };\n\n            // if action type valie is the value of `UPDATE_CATEGORIES`, returna  new state object with an updated categories array\n            case UPDATE_CATEGORIES:\n                return {\n                    ...state,\n                    categories: [...action.categories]\n                };\n\n            case UPDATE_CURRENT_CATEGORY:\n                return {\n                    ...state,\n                    currentCategory: action.currentCategory\n                };\n\n            case ADD_TO_CART:\n                return {\n                    ...state,\n                    cartOpen: true,\n                    cart: [...state.cart, action.product]\n                };\n\n            case ADD_MULTIPLE_TO_CART:\n                return {\n                    ...state,\n                    cart: [...state.cart, ...action.products]\n                };\n\n            case REMOVE_FROM_CART:\n                let newState = state.cart.filter(product => {\n                    return product._id !== action._id;\n                });\n\n                return {\n                    ...state,\n                    cartOpen: newState.length > 0,\n                    cart: newState\n                };\n\n            case UPDATE_CART_QUANTITY:\n                return {\n                    ...state,\n                    cartOpen: true,\n                    cart: state.cart.map(product => {\n                        if (action._id === product._id) {\n                            product.purchaseQuantity = action.purchaseQuantity;\n                        }\n                        return product;\n                    })\n                };\n\n            case CLEAR_CART:\n                return {\n                    ...state,\n                    cartOpen: false,\n                    cart: []\n                };\n\n            case TOGGLE_CART:\n                return {\n                    ...state,\n                    cartOpen: !state.cartOpen\n                };\n\n            // if its none of these actions, do not update state at all and keep things the same\n            default:\n                return state;\n    }\n};\n\n// export function useProductReducer(initialState) {\n//     return useReducer(reducer, initialState);\n// }\n\nexport default reducer;","import { createStore } from 'redux';\nimport reducer from '../utils/reducers';\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache\n} from '@apollo/client';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport Success from './pages/Success';\nimport OrderHistory from './pages/OrderHistory';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}