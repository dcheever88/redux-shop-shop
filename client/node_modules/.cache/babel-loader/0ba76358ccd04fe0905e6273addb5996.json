{"ast":null,"code":"var _jsxFileName = \"/Users/dannycheever/Desktop/projects/shop-shop/client/src/components/ProductItem/index.js\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\";\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction ProductItem(item) {\n  const [state, dispatch] = useStoreContext();\n  const {\n    cart\n  } = state;\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find(cartItem => cartItem._id === _id); // if there was a match, call UPDATE with a new purchase quantity\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', { ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item,\n          purchaseQuantity: 1\n        }\n      });\n      idbPromise('cart', 'put', { ...item,\n        purchaseQuantity: 1\n      });\n    }\n  };\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card px-1 py-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: `/products/${_id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: name,\n    src: `/images/${image}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, name)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, quantity, \" \", pluralize(\"item\", quantity), \" in stock\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"$\", price)), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addToCart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Add to cart\"));\n}\n\nexport default ProductItem;","map":{"version":3,"sources":["/Users/dannycheever/Desktop/projects/shop-shop/client/src/components/ProductItem/index.js"],"names":["React","Link","pluralize","useStoreContext","ADD_TO_CART","UPDATE_CART_QUANTITY","idbPromise","ProductItem","item","state","dispatch","cart","addToCart","itemInCart","find","cartItem","_id","type","purchaseQuantity","parseInt","product","image","name","price","quantity"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,WAAT,EAAsBC,oBAAtB,QAAkD,qBAAlD;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,eAAe,EAAzC;AAEA,QAAM;AAAEQ,IAAAA;AAAF,MAAWF,KAAjB;;AAEA,QAAMG,SAAS,GAAG,MAAM;AACtB;AACA,UAAMC,UAAU,GAAGF,IAAI,CAACG,IAAL,CAAWC,QAAD,IAAcA,QAAQ,CAACC,GAAT,KAAiBA,GAAzC,CAAnB,CAFsB,CAItB;;AACA,QAAIH,UAAJ,EAAgB;AACdH,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAACZ,oBADE;AAEPW,QAAAA,GAAG,EAAEA,GAFE;AAGPE,QAAAA,gBAAgB,EAAEC,QAAQ,CAACN,UAAU,CAACK,gBAAZ,CAAR,GAAwC;AAHnD,OAAD,CAAR;AAKAZ,MAAAA,UAAU,CAAC,MAAD,EAAS,KAAT,EAAgB,EACxB,GAAGO,UADqB;AAExBK,QAAAA,gBAAgB,EAAEC,QAAQ,CAACN,UAAU,CAACK,gBAAZ,CAAR,GAAwC;AAFlC,OAAhB,CAAV;AAID,KAVD,MAUO;AACPR,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEb,WADC;AAEPgB,QAAAA,OAAO,EAAE,EAAE,GAAGZ,IAAL;AAAWU,UAAAA,gBAAgB,EAAE;AAA7B;AAFF,OAAD,CAAR;AAIAZ,MAAAA,UAAU,CAAC,MAAD,EAAS,KAAT,EAAgB,EAAC,GAAGE,IAAJ;AAAUU,QAAAA,gBAAgB,EAAE;AAA5B,OAAhB,CAAV;AACD;AACA,GAtBD;;AAwBA,QAAM;AACJG,IAAAA,KADI;AAEJC,IAAAA,IAFI;AAGJN,IAAAA,GAHI;AAIJO,IAAAA,KAJI;AAKJC,IAAAA;AALI,MAMFhB,IANJ;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAG,aAAYQ,GAAI,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,GAAG,EAAEM,IADP;AAEE,IAAA,GAAG,EAAG,WAAUD,KAAM,EAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,IAAJ,CALF,CADF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAME,QAAN,OAAiBtB,SAAS,CAAC,MAAD,EAASsB,QAAT,CAA1B,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAQD,KAAR,CAFF,CARF,eAYE;AAAQ,IAAA,OAAO,EAAEX,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAZF,CADF;AAgBD;;AAED,eAAeL,WAAf","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\";\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction ProductItem(item) {\n  const [state, dispatch] = useStoreContext();\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n    // if there was a match, call UPDATE with a new purchase quantity\n    if (itemInCart) {\n      dispatch({\n        type:UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n    dispatch({\n      type: ADD_TO_CART,\n      product: { ...item, purchaseQuantity: 1 }\n    });\n    idbPromise('cart', 'put', {...item, purchaseQuantity: 1 });\n  }\n  };\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n"]},"metadata":{},"sourceType":"module"}