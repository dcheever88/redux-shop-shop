{"ast":null,"code":"import { useReducer } from 'react';\nimport { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from './actions';\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // if action type value is the value of `UPDATE_PRODCUTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n    // if action type valie is the value of `UPDATE_CATEGORIES`, returna  new state object with an updated categories array\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return { ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n\n          return product;\n        })\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state\n      };\n    // if its none of these actions, do not update state at all and keep things the same\n\n    default:\n      return state;\n  }\n};\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}","map":{"version":3,"sources":["/Users/dannycheever/Desktop/projects/shop-shop/client/src/utils/reducers.js"],"names":["useReducer","UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","useProductReducer","initialState"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,SACIC,eADJ,EAEIC,iBAFJ,EAGIC,uBAHJ,EAIIC,WAJJ,EAKIC,oBALJ,EAMIC,gBANJ,EAOIC,oBAPJ,EAQIC,UARJ,EASIC,WATJ,QAUO,WAVP;AAYA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACI;AACA,SAAKZ,eAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHG,QAAAA,QAAQ,EAAE,CAAC,GAAGF,MAAM,CAACE,QAAX;AAFP,OAAP;AAKA;;AACA,SAAKZ,iBAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHI,QAAAA,UAAU,EAAE,CAAC,GAAGH,MAAM,CAACG,UAAX;AAFT,OAAP;;AAKJ,SAAKZ,uBAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHK,QAAAA,eAAe,EAAEJ,MAAM,CAACI;AAFrB,OAAP;;AAKJ,SAAKZ,WAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHM,QAAAA,QAAQ,EAAE,IAFP;AAGHC,QAAAA,IAAI,EAAE,CAAC,GAAGP,KAAK,CAACO,IAAV,EAAgBN,MAAM,CAACO,OAAvB;AAHH,OAAP;;AAMJ,SAAKd,oBAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHO,QAAAA,IAAI,EAAE,CAAC,GAAGP,KAAK,CAACO,IAAV,EAAgB,GAAGN,MAAM,CAACE,QAA1B;AAFH,OAAP;;AAKJ,SAAKR,gBAAL;AACI,UAAIc,QAAQ,GAAGT,KAAK,CAACO,IAAN,CAAWG,MAAX,CAAkBF,OAAO,IAAI;AACxC,eAAOA,OAAO,CAACG,GAAR,KAAgBV,MAAM,CAACU,GAA9B;AACH,OAFc,CAAf;AAIA,aAAO,EACH,GAAGX,KADA;AAEHM,QAAAA,QAAQ,EAAEG,QAAQ,CAACG,MAAT,GAAkB,CAFzB;AAGHL,QAAAA,IAAI,EAAEE;AAHH,OAAP;;AAMJ,SAAKb,oBAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHM,QAAAA,QAAQ,EAAE,IAFP;AAGHC,QAAAA,IAAI,EAAEP,KAAK,CAACO,IAAN,CAAWM,GAAX,CAAeL,OAAO,IAAI;AAC5B,cAAIP,MAAM,CAACU,GAAP,KAAeH,OAAO,CAACG,GAA3B,EAAgC;AAC5BH,YAAAA,OAAO,CAACM,gBAAR,GAA2Bb,MAAM,CAACa,gBAAlC;AACH;;AACD,iBAAON,OAAP;AACH,SALK;AAHH,OAAP;;AAWJ,SAAKX,UAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHM,QAAAA,QAAQ,EAAE,KAFP;AAGHC,QAAAA,IAAI,EAAE;AAHH,OAAP;;AAMJ,SAAKT,WAAL;AACI,aAAO,EACH,GAAGE,KADA;AAEHM,QAAAA,QAAQ,EAAE,CAACN;AAFR,OAAP;AAKJ;;AACA;AACI,aAAOA,KAAP;AAxEZ;AA0EH,CA3EM;AA6EP,OAAO,SAASe,iBAAT,CAA2BC,YAA3B,EAAyC;AAC5C,SAAO3B,UAAU,CAACU,OAAD,EAAUiB,YAAV,CAAjB;AACH","sourcesContent":["import { useReducer } from 'react';\n\nimport {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n} from './actions';\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODCUTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products],\n            };\n\n            // if action type valie is the value of `UPDATE_CATEGORIES`, returna  new state object with an updated categories array\n            case UPDATE_CATEGORIES:\n                return {\n                    ...state,\n                    categories: [...action.categories]\n                };\n\n            case UPDATE_CURRENT_CATEGORY:\n                return {\n                    ...state,\n                    currentCategory: action.currentCategory\n                };\n\n            case ADD_TO_CART:\n                return {\n                    ...state,\n                    cartOpen: true,\n                    cart: [...state.cart, action.product]\n                };\n\n            case ADD_MULTIPLE_TO_CART:\n                return {\n                    ...state,\n                    cart: [...state.cart, ...action.products]\n                };\n\n            case REMOVE_FROM_CART:\n                let newState = state.cart.filter(product => {\n                    return product._id !== action._id;\n                });\n\n                return {\n                    ...state,\n                    cartOpen: newState.length > 0,\n                    cart: newState\n                };\n\n            case UPDATE_CART_QUANTITY:\n                return {\n                    ...state,\n                    cartOpen: true,\n                    cart: state.cart.map(product => {\n                        if (action._id === product._id) {\n                            product.purchaseQuantity = action.purchaseQuantity;\n                        }\n                        return product;\n                    })\n                };\n\n            case CLEAR_CART:\n                return {\n                    ...state,\n                    cartOpen: false,\n                    cart: []\n                };\n\n            case TOGGLE_CART:\n                return {\n                    ...state,\n                    cartOpen: !state,\n                }\n\n            // if its none of these actions, do not update state at all and keep things the same\n            default:\n                return state;\n    }\n};\n\nexport function useProductReducer(initialState) {\n    return useReducer(reducer, initialState);\n}"]},"metadata":{},"sourceType":"module"}